variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  DOCKER_TLS_CERTDIR: '/certs'

before_script:
  - echo "@1win:registry=https://fbet-gitlab.ex2b.co/api/v4/projects/1306/packages/npm/" > .npmrc
  - echo "//fbet-gitlab.ex2b.co/api/v4/projects/1306/packages/npm/:_authToken=${NPM_TOKEN}" >> .npmrc

stages:
  - changelog
  - analyze
  - test
  - build
  - create_docs
  - export_docs

linter:
  stage: analyze
  allow_failure: false
  image: node
  script:
    - npm ci
    - npm run lint

formatter:
  stage: analyze
  allow_failure: false
  image: node
  script:
    - npm ci
    - npm run format

test:
  stage: test
  allow_failure: false
  image: node
  script:
    - npm ci
    - npm run test

build:
  stage: build
  allow_failure: false
  except:
    - tags
  image: node
  script:
    - npm ci
    - npm run build

build-push-docker-image-job:
  image: docker:stable
  stage: build
  before_script: []
  only:
    - tags
  # Specify an additional image 'docker:dind' ("Docker-in-Docker") that
  # will start up the Docker daemon when it is brought up by a runner.
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --no-cache --build-arg NPM_TOKEN=${NPM_TOKEN} -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

changelog:
  stage: changelog
  image: node:18
  before_script:
    - apt-get update -y && apt-get install -yqqf openssh-client git unzip sshpass rsync --fix-missing
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_TOOLKIT" | tr -d '\r' | ssh-add - > /dev/null

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - ssh-keyscan $CI_SERVER_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - git config --global user.email "auto-changelog"
    - git config --global user.name "Gitlab"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE !~ /Changelog auto-update/'
  script:
    - git remote rm origin && git remote add origin git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git
    - COMMIT_SHA=$CI_COMMIT_SHA CI_API_V4_URL=$CI_API_V4_URL CI_PROJECT_ID=$CI_PROJECT_ID GITLAB_PROJECT_ACCESS_TOKEN=$GITLAB_PROJECT_ACCESS_TOKEN CI_DEFAULT_BRANCH=$CI_DEFAULT_BRANCH node ./.gitlab/scripts/gitlab-changelog

tagfixed:
  stage: changelog
  image: node:18
  before_script:
    - apt-get update -y && apt-get install -yqqf openssh-client git unzip sshpass rsync --fix-missing
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_TOOLKIT" | tr -d '\r' | ssh-add - > /dev/null

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - ssh-keyscan $CI_SERVER_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - git config --global user.email "auto-changelog"
    - git config --global user.name "Gitlab"
  rules:
    - if: '$CI_COMMIT_TAG && $CI_PIPELINE_SOURCE == "push"'
  script:
    - git remote rm origin && git remote add origin git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git
    - CI_COMMIT_TAG=$CI_COMMIT_TAG CI_API_V4_URL=$CI_API_V4_URL CI_PROJECT_ID=$CI_PROJECT_ID GITLAB_PROJECT_ACCESS_TOKEN=$GITLAB_PROJECT_ACCESS_TOKEN CI_DEFAULT_BRANCH=$CI_DEFAULT_BRANCH node ./.gitlab/scripts/gitlab-changelog

create_architecture_scheme:
  stage: create_docs
  allow_failure: true
  image: node:18
  artifacts:
    paths:
      - documentation/graph/dependencies.svg
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  script: 
    - rm -rf documentation
    - "npx @compodoc/compodoc -p tsconfig.build.json -a . --hideGenerator"

move_docfiles:
  stage: export_docs
  image: node:18
  variables:
    DEPS_GRAPH_FILENAME: "resources/dependencies.svg" 
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  script:
    # make store artifacts
    - mkdir /docs/
    - mv documentation/graph/dependencies.svg /docs/dependencies.svg
    # trigger
    # clone this project's wiki under /tmp
    # Note: The bot user (Project Access Token) isn't actually needed for the clone
    #       operation as this could be done with CI_JOB_TOKEN. But using the
    #       bot user-scoped URL at clone-time saves us from having to update
    #       the push URL later.
    - export WIKI_URL="${CI_SERVER_PROTOCOL}://project_${CI_PROJECT_ID}_bot:${BOT_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_PROJECT_PATH}.wiki.git"
    - rm -rf "/tmp/${CI_PROJECT_NAME}.wiki"
    - cd /tmp
    - git clone "${WIKI_URL}"

    # enter the cloned repo
    - cd "${CI_PROJECT_NAME}.wiki"

    # update resources files
    - cat /docs/dependencies.svg > "$DEPS_GRAPH_FILENAME"

    # set committer info
    - git config user.name "$GITLAB_USER_NAME"
    - git config user.email "$GITLAB_USER_EMAIL"

    # commit the file
    - (git add  "$DEPS_GRAPH_FILENAME" && git commit -m "Auto-updated dependecy graph & openapi spec in CI" && git push origin "HEAD:master") || echo 0
