variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  DOCKER_TLS_CERTDIR: '/certs'

before_script:
  - echo "@1win:registry=https://fbet-gitlab.ex2b.co/api/v4/projects/1443/packages/npm/" > .npmrc
  - echo "//fbet-gitlab.ex2b.co/api/v4/projects/1443/packages/npm/:_authToken=${NPM_TOKEN}" >> .npmrc
  - echo "@1win:registry=https://fbet-gitlab.ex2b.co/api/v4/projects/1306/packages/npm/" > .npmrc
  - echo "//fbet-gitlab.ex2b.co/api/v4/projects/1306/packages/npm/:_authToken=${NPM_TOKEN}" >> .npmrc

stages:
  - analyze
  - test
  - build

linter:
  stage: analyze
  allow_failure: false
  image: node
  script:
    - npm install
    - npm run lint

formatter:
  stage: analyze
  allow_failure: false
  image: node
  script:
    - npm install
    - npm run format

test:
  stage: test
  allow_failure: false
  image: node
  script:
    - npm install
    - npm run test

build:
  stage: build
  allow_failure: false
  except:
    - tags
  image: node
  script:
    - npm install
    - npm run build

build-push-docker-image-job:
  image: docker:stable
  stage: build
  before_script: []
  only:
    - tags
  # Specify an additional image 'docker:dind' ("Docker-in-Docker") that
  # will start up the Docker daemon when it is brought up by a runner.
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --no-cache --build-arg NPM_TOKEN=${NPM_TOKEN} -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
